import requests
from bs4 import BeautifulSoup
import models.db_persistence as persistence

search_cve_url = 'https://www.cvedetails.com/product-search.php?vendor_id=0&search=[lib_name]'
default_it_team = 'TEAM IT 7'
default_it_team_email =''


def get_links_to_see_all_lib_vulnerability(lib_name):
    """Return All CVE links to see product vulnerability"""
    vulnerability_links = []
    lib_search_url = search_cve_url.replace('[lib_name]', lib_name)
    html_text = requests.get(lib_search_url, verify=False).text
    soup = BeautifulSoup(html_text, 'html.parser')
    table = soup.find('table', attrs={'class': 'listtable'})
    lib_vulnerability_paths = table.find_all('a', href=True)
    for path in lib_vulnerability_paths:
        href = path['href']
        if 'vulnerability-list' in href:
            link_to_see_all_vulnerability = 'https://www.cvedetails.com' + href
            vulnerability_links.append(link_to_see_all_vulnerability)

    return vulnerability_links


def is_vulnerability_exist(cve_id):
    vulnerabilities = persistence.get_vulnerability_by_cve_id(cve_id)
    return len(vulnerabilities) > 0


def check_if_alert_is_fixed(cve_id):
    is_fixed = False
    vulnerabilities = persistence.get_vulnerability_by_cve_id(cve_id)
    if len(vulnerabilities) > 0:
        is_fixed = vulnerabilities[0][3] == 0

    return is_fixed


def get_all_lib_vulnerability(lib_name, toleance=7):
    """Return All product CVE Vulnerability to see product vulnerability"""
    vulnerability_links = get_links_to_see_all_lib_vulnerability(lib_name)
    for link in vulnerability_links:
        html_text = requests.get(link, verify=False).text
        soup = BeautifulSoup(html_text, 'html.parser')
        table = soup.find('table', attrs={'class': 'searchresults sortable'})
        rows = table.find_all('tr')
        for row_number in range(len(rows)):
            row = rows[row_number]
            columns = row.find_all('td')
            if len(columns) > 7:
                cve_id = str(columns[1].text).lstrip()
                cve_desc = str(rows[row_number + 1].text).lstrip()
                score = float(columns[7].text)
                if score > toleance:
                    if not is_vulnerability_exist(cve_id):
                        persistence.add_vulnerability(cve_id, cve_desc, default_it_team, 1)